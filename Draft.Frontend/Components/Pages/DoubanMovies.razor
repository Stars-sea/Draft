@page "/movies"
@using Draft.Frontend.Services
@using Draft.Frontend.Services.Api
@using Draft.Models.Dto.Movie
@using Microsoft.Extensions.Options

@inject IDoubanMovieApi MovieApi
@inject IProfileApi ProfileApi
@inject IOptions<ApiSettings> ApiSettings
@inject IAuthTokenProvider TokenProvider

<PageTitle>Douban Top Movies</PageTitle>

<MudGrid Justify="Justify.Center" Spacing="8">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Douban Top 250</MudText>
    </MudItem>
    <MudFlexBreak/>

    @foreach ((DoubanMovieResponse movie, bool isFavored) in DisplayMovies) {
        <MudItem xs="3">
            <MudCard>
                <MudCardMedia Image=@($"{ApiSettings.Value.BaseUrl}/api/v1/douban-movies/{movie.Id}/img")/>
                <MudCardContent>
                    <MudStack Row="true" AlignItems="AlignItems.Baseline"
                              Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.h5">@movie.Title</MudText>
                        <MudText Typo="Typo.h4" style="opacity: 40%">#@movie.Rank</MudText>
                    </MudStack>

                    <MudText Typo="Typo.caption">@movie.Year</MudText>
                    <MudText Typo="Typo.caption">@string.Join('/', movie.OtherTitles ?? [])</MudText>

                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudRating SelectedValue="@((int)movie.Rating! / 2)" MaxValue="5" ReadOnly="true"/>
                        <MudText>@movie.Rating</MudText>
                    </MudStack>

                    <MudText>@movie.Quote</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@movie.Url" Target="_blank">
                        View on Douban
                    </MudButton>

                    <MudToggleIconButton
                        Toggled="isFavored"
                        Icon="@Icons.Material.Outlined.Favorite" Color="Color.Primary"
                        ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="Color.Error"
                        ToggledChanged="toggled => OnFavoriteClick(movie, toggled)">
                    </MudToggleIconButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }

    <MudItem xs="12" Class="pb-8">
        <MudPagination Count="@PageCount" @bind-Selected="@_selected"/>
    </MudItem>
</MudGrid>

@code {
    private const int CountPerPage = 12;
    
    private int _selected;
    
    private Dictionary<DoubanMovieResponse, bool>? _movies;

    private IEnumerable<KeyValuePair<DoubanMovieResponse, bool>> DisplayMovies
        => _movies?.Skip(SelectedPageIndex * CountPerPage).Take(CountPerPage) ?? [];

    private int SelectedPageIndex => _selected - 1;
    private int PageCount => (_movies?.Count ?? CountPerPage) / CountPerPage;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (_movies != null) return;

        var movies = await MovieApi.GetDoubanMovies();

        if (!await TokenProvider.IsTokenStored())
            _movies = movies.OrderBy(m => m.Rank)
                            .ToDictionary(m => m, _ => false);
        else {
            var favorites = await ProfileApi.GetFavorites();
            _movies = movies.OrderBy(m => m.Rank)
                            .ToDictionary(m => m,
                                m => favorites.Any(f => f.Id == m.Id));
        }
        StateHasChanged();
    }

    private void OnFavoriteClick(DoubanMovieResponse movie, bool isToggled) {
        if (movie.Id == null) return;

        if (isToggled)
            ProfileApi.AddFavorite(movie.Id.Value);
        else ProfileApi.RemoveFavorite(movie.Id.Value);

        _movies![movie] = isToggled;
        StateHasChanged();
    }

}